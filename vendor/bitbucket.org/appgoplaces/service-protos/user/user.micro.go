// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bitbucket.org/appgoplaces/service-protos/user/user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	bitbucket.org/appgoplaces/service-protos/user/user.proto

It has these top-level messages:
	RegionPreferences
	CountryPreferences
	ActivityPreferences
	RegionCountryPreferences
	GetAllPreferencesRequest
	GetAllPreferencesResponse
	UpdatePreferenceRequest
	UpdatePreferenceResponse
	UserInfo
	InfoRequest
	InfoResponse
	RegisterRequest
	RegisterResponse
	SigninRequest
	SigninResponse
	RequestPasswordResetRequest
	RequestPasswordResetResponse
	ResetPasswordRequest
	ResetPasswordResponse
	VerifyRequest
	VerifyResponse
	SendVerifyCodeRequest
	SendVerifyCodeResponse
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Signin(ctx context.Context, in *SigninRequest, opts ...client.CallOption) (*SigninResponse, error)
	RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...client.CallOption) (*RequestPasswordResetResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error)
	VerifyCode(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
	SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, opts ...client.CallOption) (*SendVerifyCodeResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error)
	UpdatePreference(ctx context.Context, in *UpdatePreferenceRequest, opts ...client.CallOption) (*UpdatePreferenceResponse, error)
	GetAllPreferences(ctx context.Context, in *GetAllPreferencesRequest, opts ...client.CallOption) (*GetAllPreferencesResponse, error)
}

type userService struct {
	c           client.Client
	serviceName string
}

func UserServiceClient(serviceName string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "user"
	}
	return &userService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Signin(ctx context.Context, in *SigninRequest, opts ...client.CallOption) (*SigninResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Signin", in)
	out := new(SigninResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, opts ...client.CallOption) (*RequestPasswordResetResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.RequestPasswordReset", in)
	out := new(RequestPasswordResetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.ResetPassword", in)
	out := new(ResetPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyCode(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.VerifyCode", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, opts ...client.CallOption) (*SendVerifyCodeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.SendVerifyCode", in)
	out := new(SendVerifyCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Info", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdatePreference(ctx context.Context, in *UpdatePreferenceRequest, opts ...client.CallOption) (*UpdatePreferenceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.UpdatePreference", in)
	out := new(UpdatePreferenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetAllPreferences(ctx context.Context, in *GetAllPreferencesRequest, opts ...client.CallOption) (*GetAllPreferencesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.GetAllPreferences", in)
	out := new(GetAllPreferencesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Signin(context.Context, *SigninRequest, *SigninResponse) error
	RequestPasswordReset(context.Context, *RequestPasswordResetRequest, *RequestPasswordResetResponse) error
	ResetPassword(context.Context, *ResetPasswordRequest, *ResetPasswordResponse) error
	VerifyCode(context.Context, *VerifyRequest, *VerifyResponse) error
	SendVerifyCode(context.Context, *SendVerifyCodeRequest, *SendVerifyCodeResponse) error
	Info(context.Context, *InfoRequest, *InfoResponse) error
	UpdatePreference(context.Context, *UpdatePreferenceRequest, *UpdatePreferenceResponse) error
	GetAllPreferences(context.Context, *GetAllPreferencesRequest, *GetAllPreferencesResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&User{hdlr}, opts...))
}

type User struct {
	UserHandler
}

func (h *User) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.UserHandler.Register(ctx, in, out)
}

func (h *User) Signin(ctx context.Context, in *SigninRequest, out *SigninResponse) error {
	return h.UserHandler.Signin(ctx, in, out)
}

func (h *User) RequestPasswordReset(ctx context.Context, in *RequestPasswordResetRequest, out *RequestPasswordResetResponse) error {
	return h.UserHandler.RequestPasswordReset(ctx, in, out)
}

func (h *User) ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResetPasswordResponse) error {
	return h.UserHandler.ResetPassword(ctx, in, out)
}

func (h *User) VerifyCode(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.UserHandler.VerifyCode(ctx, in, out)
}

func (h *User) SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, out *SendVerifyCodeResponse) error {
	return h.UserHandler.SendVerifyCode(ctx, in, out)
}

func (h *User) Info(ctx context.Context, in *InfoRequest, out *InfoResponse) error {
	return h.UserHandler.Info(ctx, in, out)
}

func (h *User) UpdatePreference(ctx context.Context, in *UpdatePreferenceRequest, out *UpdatePreferenceResponse) error {
	return h.UserHandler.UpdatePreference(ctx, in, out)
}

func (h *User) GetAllPreferences(ctx context.Context, in *GetAllPreferencesRequest, out *GetAllPreferencesResponse) error {
	return h.UserHandler.GetAllPreferences(ctx, in, out)
}
