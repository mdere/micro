// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bitbucket.org/appgoplaces/service-protos/blog-data/blog-data.proto

/*
Package blogData is a generated protocol buffer package.

It is generated from these files:
	bitbucket.org/appgoplaces/service-protos/blog-data/blog-data.proto

It has these top-level messages:
	CreateTagRequest
	CreateTagResponse
	TagSuggestionRequest
	TagSuggestionResponse
	BlogDomain
	AddBlogDomainRequest
	AddBlogDomainResponse
	UpdateBlogDomainRequest
	UpdateBlogDomainResponse
	DeleteBlogDomainRequest
	DeleteBlogDomainResponse
	GetBlogDomainRequest
	GetBlogDomainResponse
	UpdateBlogAPI
	UpdatePlace
	BlogPlace
	UpdateTag
	BlogTag
	UpdateBlogRequest
	UpdateBlogResponse
	GetBlogDomain
	GetBlogDomainsRequest
	GetBlogDomainsResponse
	GetBlogsRequest
	PlaceTag
	Tag
	Place
	BlogStatus
	Blog
	GetBlogsResponse
*/
package blogData

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/struct"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BlogData service

type BlogDataService interface {
	AddBlogDomain(ctx context.Context, in *AddBlogDomainRequest, opts ...client.CallOption) (*AddBlogDomainResponse, error)
	UpdateBlogDomain(ctx context.Context, in *UpdateBlogDomainRequest, opts ...client.CallOption) (*UpdateBlogDomainResponse, error)
	DeleteBlogDomain(ctx context.Context, in *DeleteBlogDomainRequest, opts ...client.CallOption) (*DeleteBlogDomainResponse, error)
	GetBlogDomain(ctx context.Context, in *GetBlogDomainRequest, opts ...client.CallOption) (*GetBlogDomainResponse, error)
	GetBlogDomains(ctx context.Context, in *GetBlogDomainsRequest, opts ...client.CallOption) (*GetBlogDomainsResponse, error)
	GetBlogs(ctx context.Context, in *GetBlogsRequest, opts ...client.CallOption) (*GetBlogsResponse, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...client.CallOption) (*UpdateBlogResponse, error)
	TagSuggestion(ctx context.Context, in *TagSuggestionRequest, opts ...client.CallOption) (*TagSuggestionResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...client.CallOption) (*CreateTagResponse, error)
}

type blogDataService struct {
	c           client.Client
	serviceName string
}

func BlogDataServiceClient(serviceName string, c client.Client) BlogDataService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "blogData"
	}
	return &blogDataService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *blogDataService) AddBlogDomain(ctx context.Context, in *AddBlogDomainRequest, opts ...client.CallOption) (*AddBlogDomainResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.AddBlogDomain", in)
	out := new(AddBlogDomainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) UpdateBlogDomain(ctx context.Context, in *UpdateBlogDomainRequest, opts ...client.CallOption) (*UpdateBlogDomainResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.UpdateBlogDomain", in)
	out := new(UpdateBlogDomainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) DeleteBlogDomain(ctx context.Context, in *DeleteBlogDomainRequest, opts ...client.CallOption) (*DeleteBlogDomainResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.DeleteBlogDomain", in)
	out := new(DeleteBlogDomainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) GetBlogDomain(ctx context.Context, in *GetBlogDomainRequest, opts ...client.CallOption) (*GetBlogDomainResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.GetBlogDomain", in)
	out := new(GetBlogDomainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) GetBlogDomains(ctx context.Context, in *GetBlogDomainsRequest, opts ...client.CallOption) (*GetBlogDomainsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.GetBlogDomains", in)
	out := new(GetBlogDomainsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) GetBlogs(ctx context.Context, in *GetBlogsRequest, opts ...client.CallOption) (*GetBlogsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.GetBlogs", in)
	out := new(GetBlogsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...client.CallOption) (*UpdateBlogResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.UpdateBlog", in)
	out := new(UpdateBlogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) TagSuggestion(ctx context.Context, in *TagSuggestionRequest, opts ...client.CallOption) (*TagSuggestionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.TagSuggestion", in)
	out := new(TagSuggestionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogDataService) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...client.CallOption) (*CreateTagResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BlogData.CreateTag", in)
	out := new(CreateTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlogData service

type BlogDataHandler interface {
	AddBlogDomain(context.Context, *AddBlogDomainRequest, *AddBlogDomainResponse) error
	UpdateBlogDomain(context.Context, *UpdateBlogDomainRequest, *UpdateBlogDomainResponse) error
	DeleteBlogDomain(context.Context, *DeleteBlogDomainRequest, *DeleteBlogDomainResponse) error
	GetBlogDomain(context.Context, *GetBlogDomainRequest, *GetBlogDomainResponse) error
	GetBlogDomains(context.Context, *GetBlogDomainsRequest, *GetBlogDomainsResponse) error
	GetBlogs(context.Context, *GetBlogsRequest, *GetBlogsResponse) error
	UpdateBlog(context.Context, *UpdateBlogRequest, *UpdateBlogResponse) error
	TagSuggestion(context.Context, *TagSuggestionRequest, *TagSuggestionResponse) error
	CreateTag(context.Context, *CreateTagRequest, *CreateTagResponse) error
}

func RegisterBlogDataHandler(s server.Server, hdlr BlogDataHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&BlogData{hdlr}, opts...))
}

type BlogData struct {
	BlogDataHandler
}

func (h *BlogData) AddBlogDomain(ctx context.Context, in *AddBlogDomainRequest, out *AddBlogDomainResponse) error {
	return h.BlogDataHandler.AddBlogDomain(ctx, in, out)
}

func (h *BlogData) UpdateBlogDomain(ctx context.Context, in *UpdateBlogDomainRequest, out *UpdateBlogDomainResponse) error {
	return h.BlogDataHandler.UpdateBlogDomain(ctx, in, out)
}

func (h *BlogData) DeleteBlogDomain(ctx context.Context, in *DeleteBlogDomainRequest, out *DeleteBlogDomainResponse) error {
	return h.BlogDataHandler.DeleteBlogDomain(ctx, in, out)
}

func (h *BlogData) GetBlogDomain(ctx context.Context, in *GetBlogDomainRequest, out *GetBlogDomainResponse) error {
	return h.BlogDataHandler.GetBlogDomain(ctx, in, out)
}

func (h *BlogData) GetBlogDomains(ctx context.Context, in *GetBlogDomainsRequest, out *GetBlogDomainsResponse) error {
	return h.BlogDataHandler.GetBlogDomains(ctx, in, out)
}

func (h *BlogData) GetBlogs(ctx context.Context, in *GetBlogsRequest, out *GetBlogsResponse) error {
	return h.BlogDataHandler.GetBlogs(ctx, in, out)
}

func (h *BlogData) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, out *UpdateBlogResponse) error {
	return h.BlogDataHandler.UpdateBlog(ctx, in, out)
}

func (h *BlogData) TagSuggestion(ctx context.Context, in *TagSuggestionRequest, out *TagSuggestionResponse) error {
	return h.BlogDataHandler.TagSuggestion(ctx, in, out)
}

func (h *BlogData) CreateTag(ctx context.Context, in *CreateTagRequest, out *CreateTagResponse) error {
	return h.BlogDataHandler.CreateTag(ctx, in, out)
}
