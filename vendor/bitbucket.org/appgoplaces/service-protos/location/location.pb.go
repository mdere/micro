// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitbucket.org/appgoplaces/service-protos/location/location.proto

/*
Package location is a generated protocol buffer package.

It is generated from these files:
	bitbucket.org/appgoplaces/service-protos/location/location.proto

It has these top-level messages:
	QueryLocationRequest
	PlaceResults
	QueryLocationResponse
	ExtractPlaceDataRequest
	ExtractPlaceDataResponse
	LatLng
	LatLngBounds
	Geometry
	OpeningHoursOpenClose
	OpeningHoursPeriod
	OpeningHours
	Photo
	AltID
	PlacesSearchResult
	QueryRequest
	Place
	QueryResponse
	SuggestCityRequest
	SearchCityCountry
	SuggestCityResponse
*/
package location

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type QueryLocationRequest struct {
	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	CityId int64  `protobuf:"varint,2,opt,name=cityId,proto3" json:"cityId,omitempty"`
}

func (m *QueryLocationRequest) Reset()                    { *m = QueryLocationRequest{} }
func (m *QueryLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryLocationRequest) ProtoMessage()               {}
func (*QueryLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{0} }

func (m *QueryLocationRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *QueryLocationRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

type PlaceResults struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	VenueId string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3" json:"venue_id,omitempty"`
}

func (m *PlaceResults) Reset()                    { *m = PlaceResults{} }
func (m *PlaceResults) String() string            { return proto.CompactTextString(m) }
func (*PlaceResults) ProtoMessage()               {}
func (*PlaceResults) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{1} }

func (m *PlaceResults) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlaceResults) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PlaceResults) GetVenueId() string {
	if m != nil {
		return m.VenueId
	}
	return ""
}

type QueryLocationResponse struct {
	PlaceResults []*PlaceResults `protobuf:"bytes,1,rep,name=placeResults" json:"placeResults,omitempty"`
	Message      string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QueryLocationResponse) Reset()                    { *m = QueryLocationResponse{} }
func (m *QueryLocationResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryLocationResponse) ProtoMessage()               {}
func (*QueryLocationResponse) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{2} }

func (m *QueryLocationResponse) GetPlaceResults() []*PlaceResults {
	if m != nil {
		return m.PlaceResults
	}
	return nil
}

func (m *QueryLocationResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ExtractPlaceDataRequest struct {
	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	GetAll bool   `protobuf:"varint,2,opt,name=getAll,proto3" json:"getAll,omitempty"`
}

func (m *ExtractPlaceDataRequest) Reset()                    { *m = ExtractPlaceDataRequest{} }
func (m *ExtractPlaceDataRequest) String() string            { return proto.CompactTextString(m) }
func (*ExtractPlaceDataRequest) ProtoMessage()               {}
func (*ExtractPlaceDataRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{3} }

func (m *ExtractPlaceDataRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ExtractPlaceDataRequest) GetGetAll() bool {
	if m != nil {
		return m.GetAll
	}
	return false
}

type ExtractPlaceDataResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ExtractPlaceDataResponse) Reset()                    { *m = ExtractPlaceDataResponse{} }
func (m *ExtractPlaceDataResponse) String() string            { return proto.CompactTextString(m) }
func (*ExtractPlaceDataResponse) ProtoMessage()               {}
func (*ExtractPlaceDataResponse) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{4} }

func (m *ExtractPlaceDataResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LatLng struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *LatLng) Reset()                    { *m = LatLng{} }
func (m *LatLng) String() string            { return proto.CompactTextString(m) }
func (*LatLng) ProtoMessage()               {}
func (*LatLng) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{5} }

func (m *LatLng) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *LatLng) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type LatLngBounds struct {
	NorthEast *LatLng `protobuf:"bytes,1,opt,name=northEast" json:"northEast,omitempty"`
	SouthWest *LatLng `protobuf:"bytes,2,opt,name=southWest" json:"southWest,omitempty"`
}

func (m *LatLngBounds) Reset()                    { *m = LatLngBounds{} }
func (m *LatLngBounds) String() string            { return proto.CompactTextString(m) }
func (*LatLngBounds) ProtoMessage()               {}
func (*LatLngBounds) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{6} }

func (m *LatLngBounds) GetNorthEast() *LatLng {
	if m != nil {
		return m.NorthEast
	}
	return nil
}

func (m *LatLngBounds) GetSouthWest() *LatLng {
	if m != nil {
		return m.SouthWest
	}
	return nil
}

type Geometry struct {
	Location     *LatLng       `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	LocationType string        `protobuf:"bytes,2,opt,name=locationType,proto3" json:"locationType,omitempty"`
	Bounds       *LatLngBounds `protobuf:"bytes,3,opt,name=bounds" json:"bounds,omitempty"`
	Viewport     *LatLngBounds `protobuf:"bytes,4,opt,name=viewport" json:"viewport,omitempty"`
	Types        []string      `protobuf:"bytes,5,rep,name=types" json:"types,omitempty"`
}

func (m *Geometry) Reset()                    { *m = Geometry{} }
func (m *Geometry) String() string            { return proto.CompactTextString(m) }
func (*Geometry) ProtoMessage()               {}
func (*Geometry) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{7} }

func (m *Geometry) GetLocation() *LatLng {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Geometry) GetLocationType() string {
	if m != nil {
		return m.LocationType
	}
	return ""
}

func (m *Geometry) GetBounds() *LatLngBounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *Geometry) GetViewport() *LatLngBounds {
	if m != nil {
		return m.Viewport
	}
	return nil
}

func (m *Geometry) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type OpeningHoursOpenClose struct {
	// Day is a number from 0–6, corresponding to the days of the week, starting on
	// Sunday. For example, 2 means Tuesday.
	Day int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	// Time contains a time of day in 24-hour hhmm format. Values are in the range
	// 0000–2359. The time will be reported in the place’s time zone.
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *OpeningHoursOpenClose) Reset()                    { *m = OpeningHoursOpenClose{} }
func (m *OpeningHoursOpenClose) String() string            { return proto.CompactTextString(m) }
func (*OpeningHoursOpenClose) ProtoMessage()               {}
func (*OpeningHoursOpenClose) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{8} }

func (m *OpeningHoursOpenClose) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *OpeningHoursOpenClose) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type OpeningHoursPeriod struct {
	// Open is when the place opens.
	Open *OpeningHoursOpenClose `protobuf:"bytes,1,opt,name=open" json:"open,omitempty"`
	// Close is when the place closes.
	Close *OpeningHoursOpenClose `protobuf:"bytes,2,opt,name=close" json:"close,omitempty"`
}

func (m *OpeningHoursPeriod) Reset()                    { *m = OpeningHoursPeriod{} }
func (m *OpeningHoursPeriod) String() string            { return proto.CompactTextString(m) }
func (*OpeningHoursPeriod) ProtoMessage()               {}
func (*OpeningHoursPeriod) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{9} }

func (m *OpeningHoursPeriod) GetOpen() *OpeningHoursOpenClose {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *OpeningHoursPeriod) GetClose() *OpeningHoursOpenClose {
	if m != nil {
		return m.Close
	}
	return nil
}

type OpeningHours struct {
	// OpenNow is a boolean value indicating if the place is open at the current time.
	// Please note, this field will be null if it isn't present in the response.
	OpenNow bool `protobuf:"varint,1,opt,name=openNow,proto3" json:"openNow,omitempty"`
	// Periods is an array of opening periods covering seven days, starting from Sunday,
	// in chronological order.
	Periods []*OpeningHoursPeriod `protobuf:"bytes,2,rep,name=periods" json:"periods,omitempty"`
	// weekdayText is an array of seven strings representing the formatted opening hours
	// for each day of the week, for example "Monday: 8:30 am – 5:30 pm".
	WeekdayText []string `protobuf:"bytes,3,rep,name=weekdayText" json:"weekdayText,omitempty"`
	// PermanentlyClosed indicates that the place has permanently shut down. Please
	// note, this field will be null if it isn't present in the response.
	PermanentlyClosed bool `protobuf:"varint,4,opt,name=permanentlyClosed,proto3" json:"permanentlyClosed,omitempty"`
}

func (m *OpeningHours) Reset()                    { *m = OpeningHours{} }
func (m *OpeningHours) String() string            { return proto.CompactTextString(m) }
func (*OpeningHours) ProtoMessage()               {}
func (*OpeningHours) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{10} }

func (m *OpeningHours) GetOpenNow() bool {
	if m != nil {
		return m.OpenNow
	}
	return false
}

func (m *OpeningHours) GetPeriods() []*OpeningHoursPeriod {
	if m != nil {
		return m.Periods
	}
	return nil
}

func (m *OpeningHours) GetWeekdayText() []string {
	if m != nil {
		return m.WeekdayText
	}
	return nil
}

func (m *OpeningHours) GetPermanentlyClosed() bool {
	if m != nil {
		return m.PermanentlyClosed
	}
	return false
}

type Photo struct {
	// PhotoReference is used to identify the photo when you perform a Photo request.
	PhotoReference string `protobuf:"bytes,1,opt,name=photoReference,proto3" json:"photoReference,omitempty"`
	// Height is the maximum height of the image.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Width is the maximum width of the image.
	Width int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// htmlAttributions contains any required attributions.
	HTMLAttributions []string `protobuf:"bytes,4,rep,name=HTMLAttributions" json:"HTMLAttributions,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{11} }

func (m *Photo) GetPhotoReference() string {
	if m != nil {
		return m.PhotoReference
	}
	return ""
}

func (m *Photo) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Photo) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Photo) GetHTMLAttributions() []string {
	if m != nil {
		return m.HTMLAttributions
	}
	return nil
}

type AltID struct {
	// PlaceID is the APP scoped Place ID that you received when you initially created
	// this Place, before it was given a Google wide Place ID.
	PlaceID string `protobuf:"bytes,1,opt,name=placeID,proto3" json:"placeID,omitempty"`
	// Scope is the scope of this alternative place ID. It will always be APP,
	// indicating that the alternative place ID is recognised by your application only.
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (m *AltID) Reset()                    { *m = AltID{} }
func (m *AltID) String() string            { return proto.CompactTextString(m) }
func (*AltID) ProtoMessage()               {}
func (*AltID) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{12} }

func (m *AltID) GetPlaceID() string {
	if m != nil {
		return m.PlaceID
	}
	return ""
}

func (m *AltID) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

// PlacesSearchResult is an individual Places API search result
type PlacesSearchResult struct {
	// FormattedAddress is the human-readable address of this place
	FormattedAddress string `protobuf:"bytes,1,opt,name=formattedAddress,proto3" json:"formattedAddress,omitempty"`
	// Geometry contains geometry information about the result, generally including the
	// location (geocode) of the place and (optionally) the viewport identifying its
	// general area of coverage.
	AddressGeometry *Geometry `protobuf:"bytes,2,opt,name=addressGeometry" json:"addressGeometry,omitempty"`
	// Name contains the human-readable name for the returned result. For establishment
	// results, this is usually the business name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Icon contains the URL of a recommended icon which may be displayed to the user
	// when indicating this result.
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	// PlaceID is a textual identifier that uniquely identifies a place.
	PlaceID string `protobuf:"bytes,5,opt,name=placeID,proto3" json:"placeID,omitempty"`
	// Scope indicates the scope of the PlaceID.
	Scope string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	// Rating contains the place's rating, from 1.0 to 5.0, based on aggregated user
	// reviews.
	Rating float32 `protobuf:"fixed32,7,opt,name=rating,proto3" json:"rating,omitempty"`
	// Types contains an array of feature types describing the given result.
	Types []string `protobuf:"bytes,8,rep,name=types" json:"types,omitempty"`
	// OpeningHours may contain whether the place is open now or not.
	OpeningHours *OpeningHours `protobuf:"bytes,9,opt,name=openingHours" json:"openingHours,omitempty"`
	// Photos is an array of photo objects, each containing a reference to an image.
	Photos []*Photo `protobuf:"bytes,10,rep,name=photos" json:"photos,omitempty"`
	// AltIDs — An array of zero, one or more alternative place IDs for the place, with
	// a scope related to each alternative ID.
	AltIDs []*AltID `protobuf:"bytes,11,rep,name=altIDs" json:"altIDs,omitempty"`
	// PriceLevel is the price level of the place, on a scale of 0 to 4.
	PriceLevel int32 `protobuf:"varint,12,opt,name=priceLevel,proto3" json:"priceLevel,omitempty"`
	// Vicinity contains a feature name of a nearby location.
	Vicinity string `protobuf:"bytes,13,opt,name=vicinity,proto3" json:"vicinity,omitempty"`
	// PermanentlyClosed is a boolean flag indicating whether the place has permanently
	// shut down.
	PermanentlyClosed bool  `protobuf:"varint,14,opt,name=permanentlyClosed,proto3" json:"permanentlyClosed,omitempty"`
	CityId            int32 `protobuf:"varint,15,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	CountryId         int32 `protobuf:"varint,16,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (m *PlacesSearchResult) Reset()                    { *m = PlacesSearchResult{} }
func (m *PlacesSearchResult) String() string            { return proto.CompactTextString(m) }
func (*PlacesSearchResult) ProtoMessage()               {}
func (*PlacesSearchResult) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{13} }

func (m *PlacesSearchResult) GetFormattedAddress() string {
	if m != nil {
		return m.FormattedAddress
	}
	return ""
}

func (m *PlacesSearchResult) GetAddressGeometry() *Geometry {
	if m != nil {
		return m.AddressGeometry
	}
	return nil
}

func (m *PlacesSearchResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlacesSearchResult) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *PlacesSearchResult) GetPlaceID() string {
	if m != nil {
		return m.PlaceID
	}
	return ""
}

func (m *PlacesSearchResult) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *PlacesSearchResult) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *PlacesSearchResult) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *PlacesSearchResult) GetOpeningHours() *OpeningHours {
	if m != nil {
		return m.OpeningHours
	}
	return nil
}

func (m *PlacesSearchResult) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *PlacesSearchResult) GetAltIDs() []*AltID {
	if m != nil {
		return m.AltIDs
	}
	return nil
}

func (m *PlacesSearchResult) GetPriceLevel() int32 {
	if m != nil {
		return m.PriceLevel
	}
	return 0
}

func (m *PlacesSearchResult) GetVicinity() string {
	if m != nil {
		return m.Vicinity
	}
	return ""
}

func (m *PlacesSearchResult) GetPermanentlyClosed() bool {
	if m != nil {
		return m.PermanentlyClosed
	}
	return false
}

func (m *PlacesSearchResult) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *PlacesSearchResult) GetCountryId() int32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

type QueryRequest struct {
	CityId int64  `protobuf:"varint,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	Query  string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{14} }

func (m *QueryRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *QueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Place struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" sql:"name"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" sql:"address"`
	VenueId string `protobuf:"bytes,3,opt,name=venue_id,json=venueId,proto3" json:"venue_id,omitempty" sql:"venue_id"`
}

func (m *Place) Reset()                    { *m = Place{} }
func (m *Place) String() string            { return proto.CompactTextString(m) }
func (*Place) ProtoMessage()               {}
func (*Place) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{15} }

func (m *Place) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Place) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Place) GetVenueId() string {
	if m != nil {
		return m.VenueId
	}
	return ""
}

type QueryResponse struct {
	Places []*Place `protobuf:"bytes,1,rep,name=places" json:"places,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{16} }

func (m *QueryResponse) GetPlaces() []*Place {
	if m != nil {
		return m.Places
	}
	return nil
}

type SuggestCityRequest struct {
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SuggestCityRequest) Reset()                    { *m = SuggestCityRequest{} }
func (m *SuggestCityRequest) String() string            { return proto.CompactTextString(m) }
func (*SuggestCityRequest) ProtoMessage()               {}
func (*SuggestCityRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{17} }

func (m *SuggestCityRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type SearchCityCountry struct {
	CityId       int64  `protobuf:"varint,1,opt,name=cityId,proto3" json:"cityId,omitempty" sql:"city_id"`
	SearchResult string `protobuf:"bytes,2,opt,name=searchResult,proto3" json:"searchResult,omitempty" sql:"search_result"`
}

func (m *SearchCityCountry) Reset()                    { *m = SearchCityCountry{} }
func (m *SearchCityCountry) String() string            { return proto.CompactTextString(m) }
func (*SearchCityCountry) ProtoMessage()               {}
func (*SearchCityCountry) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{18} }

func (m *SearchCityCountry) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *SearchCityCountry) GetSearchResult() string {
	if m != nil {
		return m.SearchResult
	}
	return ""
}

type SuggestCityResponse struct {
	Cities []*SearchCityCountry `protobuf:"bytes,1,rep,name=cities" json:"cities,omitempty"`
}

func (m *SuggestCityResponse) Reset()                    { *m = SuggestCityResponse{} }
func (m *SuggestCityResponse) String() string            { return proto.CompactTextString(m) }
func (*SuggestCityResponse) ProtoMessage()               {}
func (*SuggestCityResponse) Descriptor() ([]byte, []int) { return fileDescriptorLocation, []int{19} }

func (m *SuggestCityResponse) GetCities() []*SearchCityCountry {
	if m != nil {
		return m.Cities
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryLocationRequest)(nil), "location.QueryLocationRequest")
	proto.RegisterType((*PlaceResults)(nil), "location.PlaceResults")
	proto.RegisterType((*QueryLocationResponse)(nil), "location.QueryLocationResponse")
	proto.RegisterType((*ExtractPlaceDataRequest)(nil), "location.ExtractPlaceDataRequest")
	proto.RegisterType((*ExtractPlaceDataResponse)(nil), "location.ExtractPlaceDataResponse")
	proto.RegisterType((*LatLng)(nil), "location.LatLng")
	proto.RegisterType((*LatLngBounds)(nil), "location.LatLngBounds")
	proto.RegisterType((*Geometry)(nil), "location.Geometry")
	proto.RegisterType((*OpeningHoursOpenClose)(nil), "location.OpeningHoursOpenClose")
	proto.RegisterType((*OpeningHoursPeriod)(nil), "location.OpeningHoursPeriod")
	proto.RegisterType((*OpeningHours)(nil), "location.OpeningHours")
	proto.RegisterType((*Photo)(nil), "location.Photo")
	proto.RegisterType((*AltID)(nil), "location.AltID")
	proto.RegisterType((*PlacesSearchResult)(nil), "location.PlacesSearchResult")
	proto.RegisterType((*QueryRequest)(nil), "location.QueryRequest")
	proto.RegisterType((*Place)(nil), "location.Place")
	proto.RegisterType((*QueryResponse)(nil), "location.QueryResponse")
	proto.RegisterType((*SuggestCityRequest)(nil), "location.SuggestCityRequest")
	proto.RegisterType((*SearchCityCountry)(nil), "location.SearchCityCountry")
	proto.RegisterType((*SuggestCityResponse)(nil), "location.SuggestCityResponse")
}

func init() {
	proto.RegisterFile("bitbucket.org/appgoplaces/service-protos/location/location.proto", fileDescriptorLocation)
}

var fileDescriptorLocation = []byte{
	// 1139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4b, 0x73, 0xdb, 0x36,
	0x10, 0x2e, 0xad, 0x87, 0xa5, 0xb5, 0xfc, 0x42, 0x1e, 0x66, 0xdd, 0x26, 0x52, 0x71, 0x68, 0xdd,
	0xd4, 0xb1, 0x67, 0xec, 0xbe, 0xc6, 0x4d, 0x67, 0xea, 0x47, 0x26, 0x71, 0x47, 0x6d, 0x5d, 0xd8,
	0x33, 0x39, 0xf4, 0x90, 0xa1, 0x49, 0x84, 0xe2, 0x84, 0x22, 0x68, 0x00, 0xb4, 0xa3, 0xe9, 0xa5,
	0xb7, 0x4e, 0xfb, 0x6b, 0x7a, 0xe8, 0x6f, 0xe9, 0xd1, 0x3f, 0xc2, 0xbf, 0xa0, 0x03, 0x10, 0x24,
	0x21, 0xc9, 0x4a, 0x72, 0xc3, 0xee, 0x7e, 0xc0, 0xbe, 0x77, 0x01, 0x3f, 0x9c, 0x47, 0xf2, 0x3c,
	0xf3, 0x5f, 0x53, 0xb9, 0xc5, 0x78, 0xb8, 0xed, 0xa5, 0x69, 0xc8, 0xd2, 0xd8, 0xf3, 0xa9, 0xd8,
	0x16, 0x94, 0x5f, 0x46, 0x3e, 0x7d, 0x9c, 0x72, 0x26, 0x99, 0xd8, 0x8e, 0x99, 0xef, 0xc9, 0x88,
	0x25, 0xe5, 0x61, 0x4b, 0x0b, 0x50, 0xab, 0xa0, 0xd7, 0xf7, 0xde, 0xfb, 0xad, 0x4b, 0x9a, 0x04,
	0x8c, 0x6f, 0x87, 0x2c, 0x64, 0xf9, 0x2b, 0xf8, 0x08, 0xee, 0xfe, 0x9a, 0x51, 0x3e, 0xea, 0x9b,
	0xc7, 0x08, 0xbd, 0xc8, 0xa8, 0x90, 0xe8, 0x2e, 0x34, 0x2e, 0x14, 0xdf, 0x75, 0x7a, 0xce, 0x46,
	0x9b, 0xe4, 0x04, 0xba, 0x0f, 0x4d, 0x3f, 0x92, 0xa3, 0xe3, 0xc0, 0x9d, 0xeb, 0x39, 0x1b, 0x35,
	0x62, 0x28, 0xfc, 0x02, 0x3a, 0x27, 0x4a, 0x21, 0xa1, 0x22, 0x8b, 0xa5, 0x40, 0x08, 0xea, 0x89,
	0x37, 0xa4, 0xe6, 0xb2, 0x3e, 0x23, 0x17, 0xe6, 0xbd, 0x20, 0xe0, 0x54, 0x08, 0x7d, 0xb9, 0x4d,
	0x0a, 0x12, 0x7d, 0x08, 0xad, 0x4b, 0x9a, 0x64, 0xf4, 0x65, 0x14, 0xb8, 0xb5, 0x5c, 0xa4, 0xe9,
	0xe3, 0x00, 0x0f, 0xe1, 0xde, 0x84, 0x79, 0x22, 0x65, 0x89, 0xa0, 0x68, 0x0f, 0x3a, 0xa9, 0xa5,
	0xd1, 0x75, 0x7a, 0xb5, 0x8d, 0x85, 0x9d, 0xfb, 0x5b, 0x65, 0x90, 0x6c, 0x7b, 0xc8, 0x18, 0x56,
	0x59, 0x32, 0xa4, 0x42, 0x78, 0x21, 0x2d, 0x2c, 0x31, 0x24, 0x7e, 0x06, 0x6b, 0x4f, 0xdf, 0x48,
	0xee, 0xf9, 0x52, 0x5f, 0x3f, 0xf2, 0xa4, 0xf7, 0xce, 0x80, 0x84, 0x54, 0xee, 0xc7, 0xb1, 0x7e,
	0xa9, 0x45, 0x0c, 0x85, 0xbf, 0x04, 0x77, 0xfa, 0x21, 0x63, 0xba, 0xa5, 0xde, 0x19, 0x57, 0xbf,
	0x09, 0xcd, 0xbe, 0x27, 0xfb, 0x49, 0x88, 0x56, 0xa0, 0x16, 0x7b, 0x52, 0xcb, 0x1d, 0xa2, 0x8e,
	0x9a, 0x93, 0x84, 0x5a, 0x8d, 0xe2, 0x24, 0x21, 0x4e, 0xa0, 0x93, 0xa3, 0x0f, 0x58, 0x96, 0x04,
	0x02, 0x6d, 0x41, 0x3b, 0x61, 0x5c, 0x0e, 0x9e, 0x7a, 0x22, 0xbf, 0xb9, 0xb0, 0xb3, 0x52, 0xc5,
	0x23, 0x87, 0x92, 0x0a, 0xa2, 0xf0, 0x82, 0x65, 0x72, 0xf0, 0x82, 0x0a, 0xa9, 0xdf, 0xbd, 0x15,
	0x5f, 0x42, 0xf0, 0x7f, 0x0e, 0xb4, 0x9e, 0x51, 0x36, 0xa4, 0x92, 0x8f, 0xd0, 0x26, 0x94, 0xf5,
	0x37, 0x53, 0x57, 0x89, 0x40, 0x18, 0x3a, 0xc5, 0xf9, 0x6c, 0x94, 0x16, 0x61, 0x1f, 0xe3, 0xa1,
	0x2d, 0x68, 0x9e, 0x6b, 0x47, 0x74, 0x0d, 0x8c, 0xe5, 0xd2, 0x76, 0x93, 0x18, 0x14, 0xda, 0x81,
	0xd6, 0x65, 0x44, 0xaf, 0x52, 0xc6, 0xa5, 0x5b, 0x7f, 0xeb, 0x8d, 0x12, 0xa7, 0x92, 0x28, 0x47,
	0x29, 0x15, 0x6e, 0xa3, 0x57, 0x53, 0x49, 0xd4, 0x04, 0xfe, 0x1e, 0xee, 0xfd, 0x92, 0xd2, 0x24,
	0x4a, 0xc2, 0xe7, 0x2c, 0xe3, 0x42, 0x9d, 0x0f, 0x63, 0x26, 0xa8, 0x8a, 0x79, 0xe0, 0xe5, 0x19,
	0x6f, 0x10, 0x75, 0x54, 0x85, 0x2d, 0xa3, 0x61, 0xe1, 0x80, 0x3e, 0xe3, 0x3f, 0x1c, 0x40, 0xf6,
	0xfd, 0x13, 0xca, 0x23, 0x16, 0xa0, 0x5d, 0xa8, 0xb3, 0x94, 0x16, 0xd1, 0xe9, 0x56, 0xb6, 0xdd,
	0xaa, 0x8b, 0x68, 0x30, 0xfa, 0x0a, 0x1a, 0xbe, 0x22, 0x4d, 0x3e, 0xde, 0x79, 0x2b, 0x47, 0xe3,
	0x7f, 0x1c, 0xe8, 0xd8, 0x00, 0x55, 0x63, 0xea, 0xbd, 0x9f, 0xd9, 0x95, 0xd6, 0xdf, 0x22, 0x05,
	0x89, 0xbe, 0x86, 0xf9, 0x54, 0x1b, 0xa8, 0xda, 0x50, 0xf5, 0xcc, 0xc7, 0xb7, 0xeb, 0xc8, 0xbd,
	0x20, 0x05, 0x18, 0xf5, 0x60, 0xe1, 0x8a, 0xd2, 0xd7, 0x81, 0x37, 0x3a, 0xa3, 0x6f, 0xa4, 0x5b,
	0xd3, 0x01, 0xb4, 0x59, 0x68, 0x13, 0x56, 0x53, 0xca, 0x87, 0x5e, 0x42, 0x13, 0x19, 0x8f, 0xb4,
	0x7d, 0x81, 0xce, 0x4c, 0x8b, 0x4c, 0x0b, 0xf0, 0x5f, 0x0e, 0x34, 0x4e, 0x06, 0x6a, 0x90, 0x7d,
	0x0a, 0x4b, 0xa9, 0x3a, 0x10, 0xfa, 0x8a, 0x72, 0x9a, 0xf8, 0x45, 0x5b, 0x4c, 0x70, 0x55, 0xaf,
	0x0d, 0x68, 0x14, 0x0e, 0xf2, 0x62, 0x6d, 0x10, 0x43, 0xa9, 0xa4, 0x5e, 0x45, 0x81, 0x1c, 0xe8,
	0xba, 0x69, 0x90, 0x9c, 0x40, 0x8f, 0x60, 0xe5, 0xf9, 0xd9, 0x4f, 0xfd, 0x7d, 0x29, 0x79, 0x74,
	0x9e, 0x29, 0xf7, 0x84, 0x5b, 0xd7, 0x46, 0x4f, 0xf1, 0xf1, 0x37, 0xd0, 0xd8, 0x8f, 0xe5, 0xf1,
	0x91, 0x0a, 0x9b, 0x9e, 0x14, 0xc7, 0x47, 0x45, 0x6b, 0x1a, 0x52, 0x29, 0x11, 0x3e, 0x2b, 0x4b,
	0x37, 0x27, 0xf0, 0xbf, 0x75, 0x40, 0xba, 0xc1, 0xc5, 0x29, 0xf5, 0xb8, 0x3f, 0xc8, 0x27, 0x8c,
	0xd2, 0xfd, 0x8a, 0xf1, 0xa1, 0x27, 0x25, 0x0d, 0xf6, 0xcd, 0xcc, 0xcb, 0xdf, 0x9b, 0xe2, 0xa3,
	0x27, 0xb0, 0x6c, 0xe6, 0x60, 0xd1, 0x5b, 0x26, 0xf7, 0xa8, 0xca, 0x4b, 0x21, 0x21, 0x93, 0xd0,
	0x72, 0xd0, 0xd6, 0xac, 0x41, 0x8b, 0xa0, 0x1e, 0xf9, 0x2c, 0xd1, 0xa1, 0x6f, 0x13, 0x7d, 0xb6,
	0x1d, 0x6b, 0xcc, 0x70, 0xac, 0x69, 0x39, 0xa6, 0x62, 0xcd, 0x3d, 0x19, 0x25, 0xa1, 0x3b, 0xdf,
	0x73, 0x36, 0xe6, 0x88, 0xa1, 0xaa, 0x06, 0x6a, 0x59, 0x0d, 0xa4, 0x86, 0x31, 0xb3, 0x4a, 0xc7,
	0x6d, 0x4f, 0xb6, 0xa3, 0x5d, 0x58, 0x64, 0x0c, 0x8b, 0x3e, 0x83, 0xa6, 0xce, 0xb3, 0x70, 0x41,
	0x97, 0xe3, 0xb2, 0x35, 0xc2, 0x75, 0xfe, 0x8d, 0x58, 0x01, 0x3d, 0x95, 0x24, 0xe1, 0x2e, 0x4c,
	0x02, 0x75, 0xf2, 0x88, 0x11, 0xa3, 0x87, 0x00, 0x29, 0x8f, 0x7c, 0xda, 0xa7, 0x97, 0x34, 0x76,
	0x3b, 0xba, 0x28, 0x2c, 0x0e, 0x5a, 0x57, 0x83, 0xc3, 0x8f, 0x92, 0x48, 0x8e, 0xdc, 0x45, 0xed,
	0x74, 0x49, 0xdf, 0x5e, 0xc3, 0x4b, 0x33, 0x6a, 0x18, 0xad, 0xc1, 0xbc, 0x5a, 0x80, 0x6a, 0x6f,
	0x2d, 0xe7, 0x25, 0x99, 0xef, 0x43, 0xf4, 0x00, 0xc0, 0x67, 0x59, 0x22, 0xb9, 0x96, 0xad, 0x68,
	0x59, 0xdb, 0x70, 0x8e, 0x03, 0xfc, 0x04, 0x3a, 0x7a, 0xab, 0x15, 0xbb, 0xa5, 0x5a, 0xab, 0x8e,
	0xbd, 0x56, 0xab, 0x9d, 0x33, 0x67, 0xed, 0x1c, 0xfc, 0xa7, 0xea, 0x1c, 0x95, 0x3d, 0x84, 0xed,
	0x35, 0x7b, 0xb0, 0x74, 0x73, 0xdd, 0x05, 0x71, 0x11, 0xef, 0x61, 0xc5, 0xc4, 0xa6, 0x1a, 0xbe,
	0x98, 0x58, 0xbb, 0x07, 0xab, 0x37, 0xd7, 0xdd, 0x45, 0x0d, 0x33, 0x7c, 0x5c, 0x6d, 0xe2, 0xc7,
	0x93, 0x9b, 0xf8, 0x00, 0xdd, 0x5c, 0x77, 0x97, 0x34, 0xba, 0x10, 0xe0, 0x6a, 0x3b, 0x7f, 0x0b,
	0x8b, 0xc6, 0x0f, 0xb3, 0xda, 0x54, 0x32, 0x75, 0x3b, 0x98, 0x7d, 0xbc, 0x3c, 0xb9, 0x8f, 0x8d,
	0x18, 0x3f, 0x02, 0x74, 0x9a, 0x85, 0x21, 0x15, 0xf2, 0x30, 0x92, 0xa3, 0xa9, 0x1d, 0x3b, 0xe6,
	0xef, 0xef, 0xb0, 0x9a, 0x77, 0x97, 0x82, 0x1e, 0xe6, 0x41, 0x44, 0x9f, 0x8f, 0x87, 0xcc, 0xf2,
	0xca, 0x64, 0x04, 0x97, 0x51, 0xfc, 0x0e, 0x3a, 0xc2, 0xea, 0x4e, 0x13, 0x86, 0xb5, 0x9b, 0xeb,
	0xee, 0x1d, 0x7d, 0x21, 0x17, 0xbe, 0xe4, 0x5a, 0x8a, 0xc9, 0x18, 0x18, 0xff, 0x08, 0x77, 0xc6,
	0x0c, 0x35, 0x8e, 0xee, 0x6a, 0xf5, 0x51, 0xe9, 0xe8, 0x47, 0x95, 0xa3, 0x53, 0xb6, 0x12, 0x03,
	0xdd, 0xf9, 0x7b, 0x0e, 0x5a, 0xc5, 0x47, 0x06, 0xf5, 0x61, 0xc1, 0x7a, 0x18, 0x59, 0x53, 0x78,
	0x3a, 0x30, 0xeb, 0x0f, 0x66, 0x48, 0x73, 0x6b, 0xf0, 0x07, 0xe8, 0x14, 0x96, 0xc6, 0xfe, 0x49,
	0x02, 0x3d, 0xac, 0xae, 0xdc, 0xf6, 0xc1, 0x5b, 0xef, 0xce, 0x94, 0x97, 0x8f, 0xfe, 0x06, 0x2b,
	0x93, 0x9f, 0x18, 0xf4, 0x49, 0x75, 0x6d, 0xc6, 0x4f, 0x69, 0x1d, 0xbf, 0x0d, 0x52, 0x3c, 0x7e,
	0xde, 0xd4, 0xff, 0xcf, 0xdd, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xee, 0x06, 0x46, 0xd6, 0x09,
	0x0b, 0x00, 0x00,
}
